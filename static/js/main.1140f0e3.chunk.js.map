{"version":3,"sources":["reducer/rootReducer.ts","utils/utils.ts","constants/constants.ts","utils/validateInput.ts","utils/getWeather.ts","utils/getCurrentLocation.ts","components/SearchBar/SearchBar.tsx","components/ForecastCard/ForecastCard.tsx","components/ForecastCardList/ForecastCardList.tsx","components/CurrentWeatherCard/CurrentWeatherCard.tsx","components/Loader/Loader.tsx","components/Alert/Alert.tsx","components/FavoritesDropdown/FavoritesDropdown.tsx","App.tsx","index.tsx"],"names":["Actions","useStateSelector","selector","equalityFn","useSelector","DEFAULT_STATE","errorMessage","inputValidationMessage","favoriteCitiesList","weather","current","forecast","isLoading","WeatherType","LocalStorageKeys","setErrorMessage","message","type","SetErrorMessage","payload","setInputValidationMessage","SetInputValidationMessage","setCurrentWeather","currentWeather","SetCurrentWeather","setForecast","SetForecast","setFavoriteCitiesList","citiesList","SetFavoriteCitiesList","resetErrorAndInputMessages","ResetErrorAndInputMessages","setIsLoading","SetIsLoading","inputValidationMessages","validateInput","input","length","test","store","dispatch","getWeather","weatherType","city","isCurrentWeather","Current","currentWeatherKey","forecastKey","ForeCast","cachedWeather","sessionStorage","getItem","requestUrl","process","fetch","then","response","json","Number","cod","ResetWeather","location","name","temp","Math","round","main","condition","setItem","JSON","stringify","setCurrentWeatherInStateAndCache","list","setForecastInStateAndCache","catch","error","parse","setWeatherFromLocalStorage","getCurrentAndForecastWeather","Promise","resolve","reject","all","responses","publicIp","require","getCurrentLocation","a","v4","ip","ipInfo","cityByIp","SearchBar","useDispatch","useState","searchValue","setSearchValue","currentCity","state","favoritesList","alertMessage","isCityAlreadyInFavoritesList","includes","isAddToFavoritesEnabled","handleSearch","event","preventDefault","trim","onCurrentLocationClick","className","onChange","query","target","value","placeholder","autoFocus","onClick","localStorage","FavoritesList","disabled","ForecastCard","props","weekday","icon","moment","ForecastCardList","forecastData","bank","today","date","newData","filter","day","ApiDate","unix","dt","indexOf","push","map","index","key","id","dt_txt","format","CurrentWeatherCard","currentDate","Date","description","Loader","Alert","FavoritesDropdown","favoriteCities","setValue","handleSelect","selectedCity","hidden","App","weatherForecast","favoriteList","useEffect","cachedFavoritesList","createStore","action","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1140f0e3.chunk.js","sourcesContent":["interface IWeatherCondition {\r\n    main: string | null;\r\n    description: string | null;\r\n    icon: string | null;\r\n    id: number | null;\r\n}\r\n\r\nexport interface ICurrentWeather {\r\n    location: string | null;\r\n    temp: number | null;\r\n    condition: IWeatherCondition;\r\n}\r\n\r\ninterface IWeather {\r\n    current: ICurrentWeather | null;\r\n    forecast: Array<any>;\r\n}\r\n\r\nexport interface IState {\r\n    errorMessage: string | null;\r\n    inputValidationMessage: string | null;\r\n    favoriteCitiesList: Array<string>;\r\n    weather: IWeather;\r\n    isLoading: boolean;\r\n}\r\n\r\nconst DEFAULT_STATE: IState = {\r\n    errorMessage: null,\r\n    inputValidationMessage: null,\r\n    favoriteCitiesList: [],\r\n    weather: {\r\n        current: null,\r\n        forecast: []\r\n    },\r\n    isLoading: false\r\n};\r\n\r\nenum Actions {\r\n    SetErrorMessage = 'SetErrorMessage',\r\n    SetInputValidationMessage = 'SetInputValidationMessage',\r\n    SetCurrentWeather = 'SetCurrentWeather',\r\n    SetForecast = 'SetForecast',\r\n    SetFavoriteCitiesList = 'SetFavoriteCitiesList',\r\n    ResetErrorAndInputMessages = 'ResetErrorAndInputMessages',\r\n    ResetWeather = 'ResetWeather',\r\n    SetIsLoading = 'SetIsLoading'\r\n}\r\n\r\nexport const setErrorMessage = (message: string) => ({\r\n    type: Actions.SetErrorMessage,\r\n    payload: message\r\n});\r\n\r\nexport const setInputValidationMessage = (message: string) => ({\r\n    type: Actions.SetInputValidationMessage,\r\n    payload: message\r\n});\r\n\r\nexport const setCurrentWeather = (currentWeather: ICurrentWeather) => ({\r\n    type: Actions.SetCurrentWeather,\r\n    payload: currentWeather\r\n});\r\n\r\nexport const setForecast = (forecast: IWeather['forecast']) => ({\r\n    type: Actions.SetForecast,\r\n    payload: forecast\r\n});\r\n\r\nexport const setFavoriteCitiesList = (citiesList: Array<string>) => ({\r\n    type: Actions.SetFavoriteCitiesList,\r\n    payload: citiesList\r\n});\r\n\r\nexport const resetErrorAndInputMessages = () => ({\r\n    type: Actions.ResetErrorAndInputMessages\r\n});\r\n\r\nexport const resetWeather = () => ({\r\n    type: Actions.ResetWeather\r\n});\r\n\r\nexport const setIsLoading = (isLoading: boolean) => ({\r\n    type: Actions.SetIsLoading,\r\n    payload: isLoading\r\n});\r\n\r\nexport const rootReducer = (state = DEFAULT_STATE, action: {type: Actions; payload?: any}) => {\r\n    switch (action.type) {\r\n        case Actions.SetErrorMessage:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.payload\r\n            };\r\n        case Actions.SetInputValidationMessage:\r\n            return {\r\n                ...state,\r\n                inputValidationMessage: action.payload\r\n            };\r\n        case Actions.SetCurrentWeather:\r\n            return {\r\n                ...state,\r\n                weather: {\r\n                    ...state.weather,\r\n                    current: action.payload\r\n                }\r\n            };\r\n        case Actions.SetForecast:\r\n            return {\r\n                ...state,\r\n                weather: {\r\n                    ...state.weather,\r\n                    forecast: action.payload\r\n                }\r\n            };\r\n        case Actions.SetFavoriteCitiesList:\r\n            return {\r\n                ...state,\r\n                favoriteCitiesList: action.payload\r\n            };\r\n        case Actions.SetIsLoading:\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            };\r\n        case Actions.ResetErrorAndInputMessages:\r\n            return {\r\n                ...state,\r\n                errorMessage: null,\r\n                inputValidationMessage: null\r\n            };\r\n        case Actions.ResetWeather:\r\n            return {\r\n                ...state,\r\n                weather: {\r\n                    current: null,\r\n                    forecast: []\r\n                }\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import {IState} from '../reducer/rootReducer';\r\nimport {useSelector} from 'react-redux';\r\n\r\nexport const isNullOrUndefined = (value: any) => value === null || value === undefined;\r\nexport const isDefined = (value: any) => !isNullOrUndefined(value);\r\n\r\nexport const joinTruthy = (items: Array<string | number | boolean | null | undefined>, delimiter = ' ') =>\r\n    (items || []).filter(Boolean).join(delimiter);\r\n\r\nexport const classNames = (...cNames: Array<string | number | boolean | null | undefined>) => joinTruthy(cNames);\r\n\r\nexport const useStateSelector = <TValue>(\r\n    selector: (state: IState) => TValue,\r\n    equalityFn?: (left: TValue, right: TValue) => boolean\r\n) => useSelector<IState, TValue>(selector, equalityFn);","export const inputValidationMessages = {\r\n    empty: 'Please enter city name',\r\n    nonAlpha: 'Invalid characters'\r\n};\r\n\r\nexport enum WeatherType {\r\n    Current = 'weather',\r\n    ForeCast = 'forecast'\r\n}\r\n\r\nexport enum LocalStorageKeys {\r\n    FavoritesList = 'favoritesList'\r\n}\r\n","import {inputValidationMessages} from '../constants/constants';\r\nimport {setInputValidationMessage} from '../reducer/rootReducer';\r\nimport {store} from '../index';\r\n\r\nexport const validateInput = (input: string) => {\r\n    let message = null;\r\n    if (input.length === 0) {\r\n        message = inputValidationMessages.empty;\r\n    }\r\n    if (!/^[a-zA-Z]*$/g.test(input)) {\r\n        message = inputValidationMessages.nonAlpha;\r\n    }\r\n    if (message) {\r\n        store.dispatch(setInputValidationMessage(message));\r\n    }\r\n    return message;\r\n};","import {resetWeather, setCurrentWeather, setErrorMessage, setForecast} from '../reducer/rootReducer';\r\nimport {WeatherType} from '../constants/constants';\r\nimport {store} from '../index';\r\n\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\nconst apiUrl = 'https://api.openweathermap.org/data/2.5';\r\n\r\nconst setCurrentWeatherInStateAndCache = (weather: any, currentWeatherKey: string) => {\r\n    store.dispatch(setCurrentWeather(\r\n        {\r\n            location: weather.name,\r\n            temp: Math.round(weather.main.temp),\r\n            condition: weather.weather[0]\r\n        })\r\n    );\r\n    // Store in sessionStorage instead of localStorage, to fetch new data after session close.\r\n    // Maybe it`s not needed at all, cause weather info updates constantly, but lets keep it this way.\r\n    sessionStorage.setItem(currentWeatherKey, JSON.stringify(weather));\r\n};\r\n\r\nconst setForecastInStateAndCache = (weather: any, forecastKey: string) => {\r\n    store.dispatch(setForecast(weather.list));\r\n    sessionStorage.setItem(forecastKey, JSON.stringify(weather));\r\n};\r\n\r\nconst setWeatherFromLocalStorage = (cachedWeather: any, isCurrentWeather: boolean) => {\r\n    const weather = JSON.parse(cachedWeather);\r\n    if (isCurrentWeather) {\r\n        store.dispatch(setCurrentWeather({\r\n            location: weather.name,\r\n            temp: Math.round(weather.main.temp),\r\n            condition: weather.weather[0]\r\n        }));\r\n    } else {\r\n        store.dispatch(setForecast(weather.list));\r\n    }\r\n};\r\n\r\nexport const getWeather = (weatherType: WeatherType, city: string) => {\r\n    const isCurrentWeather = weatherType === WeatherType.Current;\r\n    const currentWeatherKey = `${city}${WeatherType.Current}`;\r\n    const forecastKey = `${city}${WeatherType.ForeCast}`;\r\n    const cachedWeather = sessionStorage.getItem(isCurrentWeather ? currentWeatherKey : forecastKey);\r\n    if (cachedWeather) {\r\n        setWeatherFromLocalStorage(cachedWeather, isCurrentWeather);\r\n    } else {\r\n        const requestUrl = `${apiUrl}/${weatherType}?q=${city}&units=metric&appid=${API_KEY}`;\r\n        return fetch(requestUrl)\r\n            .then(response => response.json())\r\n            .then(weather => {\r\n                const responseStatusCode = Number(weather.cod);\r\n                if (responseStatusCode !== 200) {\r\n                    store.dispatch(resetWeather());\r\n                    store.dispatch(setErrorMessage(weather.message));\r\n                    return;\r\n                }\r\n                if (isCurrentWeather) {\r\n                    setCurrentWeatherInStateAndCache(weather, currentWeatherKey);\r\n                } else {\r\n                    setForecastInStateAndCache(weather, forecastKey);\r\n                }\r\n            })\r\n            .catch(error => store.dispatch(setErrorMessage(error)));\r\n    }\r\n};\r\n\r\nexport const getCurrentAndForecastWeather = (city: string) => {\r\n    return new Promise((resolve, reject) => {\r\n        Promise.all([\r\n            getWeather(WeatherType.Current, city),\r\n            getWeather(WeatherType.ForeCast, city)\r\n        ]).then(responses => resolve(responses)).catch(reject);\r\n    });\r\n};","import {store} from '../index';\r\nimport {setErrorMessage} from '../reducer/rootReducer';\r\n\r\nconst publicIp = require('public-ip');\r\n\r\nconst API_KEY = process.env.REACT_APP_IP_INFO_API_KEY;\r\n\r\nexport const getCurrentLocation = async () => {\r\n    let cityByIp;\r\n    try {\r\n        const ip = await publicIp.v4();\r\n        const response = await fetch(`http://api.ipstack.com/${ip}?access_key=${API_KEY}`);\r\n        const ipInfo = await response.json();\r\n        cityByIp = ipInfo?.city;\r\n    }\r\n    catch (error) {\r\n        store.dispatch(setErrorMessage(error));\r\n    }\r\n    return cityByIp;\r\n};","import * as React from 'react';\r\nimport {useState} from 'react';\r\nimport './styles/SearchBar.scss';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useStateSelector} from '../../utils/utils';\r\nimport {\r\n    resetErrorAndInputMessages,\r\n    setFavoriteCitiesList,\r\n    setInputValidationMessage,\r\n    setIsLoading\r\n} from '../../reducer/rootReducer';\r\nimport {validateInput} from '../../utils/validateInput';\r\nimport {getCurrentAndForecastWeather} from '../../utils/getWeather';\r\nimport {getCurrentLocation} from '../../utils/getCurrentLocation';\r\nimport {LocalStorageKeys} from '../../constants/constants';\r\n\r\nexport const SearchBar: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch();\r\n    const [searchValue, setSearchValue] = useState<string>('');\r\n    const currentCity = useStateSelector(state => state.weather.current?.location);\r\n    const favoritesList = useStateSelector(state => state.favoriteCitiesList);\r\n    const inputValidationMessage = useStateSelector(state => state.inputValidationMessage);\r\n    const errorMessage = useStateSelector(state => state.errorMessage);\r\n    const alertMessage = inputValidationMessage ?? errorMessage;\r\n    const isCityAlreadyInFavoritesList = !!(currentCity && favoritesList.includes(currentCity));\r\n    const isAddToFavoritesEnabled = !!currentCity && !isCityAlreadyInFavoritesList;\r\n\r\n    const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const query = event.target.value;\r\n        setSearchValue(query);\r\n        if (inputValidationMessage) {\r\n            dispatch(setInputValidationMessage(''));\r\n        }\r\n    };\r\n\r\n    const handleSearch = async (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        if (alertMessage) {\r\n            dispatch(resetErrorAndInputMessages());\r\n        }\r\n        const isInvalid = !!validateInput(searchValue);\r\n        if (isInvalid) {\r\n            return;\r\n        }\r\n        dispatch(setIsLoading(true));\r\n        const city = searchValue.trim();\r\n        await getCurrentAndForecastWeather(city);\r\n        dispatch(setIsLoading(false));\r\n        setSearchValue('');\r\n    };\r\n\r\n    const onCurrentLocationClick = async (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        dispatch(setIsLoading(true));\r\n        if (alertMessage) {\r\n            dispatch(resetErrorAndInputMessages());\r\n        }\r\n        const cityByIp = await getCurrentLocation();\r\n        await getCurrentAndForecastWeather(cityByIp);\r\n        dispatch(setIsLoading(false));\r\n    };\r\n\r\n    const onAddToFavorites = (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        if (currentCity && !isCityAlreadyInFavoritesList) {\r\n            dispatch(setFavoriteCitiesList([...favoritesList, currentCity]));\r\n            localStorage.setItem(LocalStorageKeys.FavoritesList, JSON.stringify([...favoritesList, currentCity]));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form className='search-bar'>\r\n            <input\r\n                onChange={onInputChange}\r\n                type='text'\r\n                className='search-bar__input'\r\n                value={searchValue}\r\n                placeholder='Enter city'\r\n                autoFocus\r\n            />\r\n            <div className='search-bar__buttons'>\r\n                <button\r\n                    type='submit'\r\n                    className='search-bar__button'\r\n                    onClick={handleSearch}\r\n                >\r\n                        Get Weather\r\n                </button>\r\n                <button\r\n                    className='search-bar__button'\r\n                    onClick={onAddToFavorites}\r\n                    disabled={!isAddToFavoritesEnabled}\r\n                >\r\n                        Add to Favorites\r\n                </button>\r\n                <button\r\n                    className='search-bar__button'\r\n                    onClick={onCurrentLocationClick}\r\n                >\r\n                   Current Location\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};","import * as React from 'react';\r\nimport './style/ForecastCard.scss';\r\n\r\ninterface IWeatherCardProps {\r\n    weekday: string;\r\n    temp: number;\r\n    icon: string;\r\n}\r\n\r\nexport const ForecastCard: React.FunctionComponent<IWeatherCardProps> = props => {\r\n    return (\r\n        <div className='forecast-card'>\r\n            <div className='forecast-card__day'>{props.weekday}</div>\r\n            <div className='forecast-card__icon'><i className={`wi wi-owm-${props.icon} icon`} /></div>\r\n            <div className='forecast-card__temp'>{props.temp}°</div>\r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport './styles/CardList.scss';\r\nimport {ForecastCard} from '../ForecastCard/ForecastCard';\r\nimport {useStateSelector} from '../../utils/utils';\r\nconst moment = require('moment');\r\n\r\nexport const ForecastCardList: React.FunctionComponent = () => {\r\n    const forecastData = useStateSelector(state => state.weather.forecast);\r\n    const bank: Array<any> = [];\r\n    const today = moment().date();\r\n\r\n    const newData = forecastData.filter( day => {\r\n        const ApiDate = moment.unix(day.dt).date();\r\n        if (ApiDate === today) {\r\n            return false;\r\n        } else if (bank.indexOf(ApiDate) > -1){\r\n            return false;\r\n        } else {\r\n            bank.push(ApiDate);\r\n            return true;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className='card-list'>\r\n            {\r\n                newData.map((day, index) => {\r\n                    return (\r\n                        <ForecastCard\r\n                            key={index}\r\n                            temp={Math.round(day.main.temp)}\r\n                            icon={day.weather[0].id}\r\n                            weekday={moment(day.dt_txt).format('dddd')}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport './styles/CurrentWeatherCard.scss';\r\nimport {useStateSelector} from '../../utils/utils';\r\nimport {ICurrentWeather} from '../../reducer/rootReducer';\r\nimport moment from 'moment';\r\n\r\nexport const CurrentWeatherCard: React.FunctionComponent = () => {\r\n    const currentWeather = useStateSelector<ICurrentWeather | null>(state => state.weather.current);\r\n    const currentDate = new Date();\r\n\r\n    return (\r\n        <div className='current-weather'>\r\n            <div className='current-weather__date'>\r\n                {moment(currentDate).format('llll')}\r\n            </div>\r\n            <div className='current-weather__city'>\r\n                {currentWeather?.location}\r\n            </div>\r\n            <div className='current-weather__weather-info'>\r\n                <div className='current-weather__temp'>\r\n                    <span>{currentWeather?.temp}°</span>\r\n                </div>\r\n                <div className='current-weather__condition'>\r\n                    <div className='current-weather__condition__title'>\r\n                        {currentWeather?.condition.main}\r\n                    </div>\r\n                    <div className='current-weather__condition__description'>\r\n                        {currentWeather?.condition.description}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport './styles/Loader.scss';\r\n\r\nexport const Loader: React.FunctionComponent = () => (<div className='loader'/>);\r\n","import * as React from 'react';\r\nimport './styles/Alert.scss';\r\n\r\ninterface IErrorCardProps {\r\n    errorMessage: string;\r\n}\r\n\r\nexport const Alert: React.FunctionComponent<IErrorCardProps> = props => (\r\n    <div className='error-card'>\r\n        {props.errorMessage}\r\n    </div>\r\n);\r\n","import * as React from 'react';\r\nimport './styles/FavoritesDropdown.scss';\r\nimport {useStateSelector} from '../../utils/utils';\r\nimport {useState} from 'react';\r\nimport {getCurrentAndForecastWeather} from '../../utils/getWeather';\r\nimport {useDispatch} from 'react-redux';\r\nimport {resetErrorAndInputMessages, setIsLoading} from '../../reducer/rootReducer';\r\n\r\nexport const FavoritesDropdown: React.FunctionComponent = () => {\r\n    const dispatch = useDispatch();\r\n    const favoriteCities = useStateSelector<Array<string>>(state => state.favoriteCitiesList);\r\n    const currentCity = useStateSelector(state => state.weather.current?.location);\r\n    const [value, setValue] = useState('');\r\n\r\n    const handleSelect = async (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const selectedCity = event.target.value;\r\n        setValue(selectedCity);\r\n        if (selectedCity !== currentCity) {\r\n            dispatch(resetErrorAndInputMessages());\r\n            dispatch(setIsLoading(true));\r\n            await getCurrentAndForecastWeather(selectedCity);\r\n            dispatch(setIsLoading(false));\r\n        } else {\r\n            setValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <select\r\n            className='dropdown'\r\n            id='favorites'\r\n            onChange={event => handleSelect(event)}\r\n            value={value}\r\n        >\r\n            <option value='' disabled hidden>Favorite cities:</option>\r\n            {\r\n                favoriteCities.map((city,index) =>\r\n                    <option\r\n                        className='dropdown__option'\r\n                        key={`${city}-${index}`}\r\n                        value={city}\r\n                    >\r\n                        {city}\r\n                    </option>\r\n                )\r\n            }\r\n        </select>\r\n    );\r\n};","import React, {useEffect} from 'react';\r\nimport {SearchBar} from './components/SearchBar/SearchBar';\r\nimport {ForecastCardList} from './components/ForecastCardList/ForecastCardList';\r\nimport {useStateSelector} from './utils/utils';\r\nimport './styles/App.scss';\r\nimport {CurrentWeatherCard} from './components/CurrentWeatherCard/CurrentWeatherCard';\r\nimport {Loader} from './components/Loader/Loader';\r\nimport {Alert} from './components/Alert/Alert';\r\nimport {FavoritesDropdown} from './components/FavoritesDropdown/FavoritesDropdown';\r\nimport {LocalStorageKeys} from './constants/constants';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setFavoriteCitiesList} from './reducer/rootReducer';\r\n\r\nexport const App = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoading = useStateSelector(state => state.isLoading);\r\n    const currentWeather = useStateSelector(state => state.weather.current);\r\n    const weatherForecast = useStateSelector(state => state.weather.forecast);\r\n    const favoriteList = useStateSelector<Array<string>>(state => state.favoriteCitiesList);\r\n    const inputValidationMessage = useStateSelector(state => state.inputValidationMessage);\r\n    const errorMessage = useStateSelector(state => state.errorMessage);\r\n    const alertMessage = inputValidationMessage ?? errorMessage;\r\n\r\n    useEffect(() => {\r\n        const cachedFavoritesList = localStorage.getItem(LocalStorageKeys.FavoritesList);\r\n        if (cachedFavoritesList) {\r\n            dispatch(setFavoriteCitiesList(JSON.parse(cachedFavoritesList)));\r\n        }\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='weather'>\r\n                <header className='weather__header'>\r\n                    Weather App\r\n                </header>\r\n                {\r\n                    !isLoading && alertMessage &&\r\n                    <Alert errorMessage={alertMessage}/>\r\n                }\r\n                <SearchBar />\r\n                {\r\n                    favoriteList.length > 0 &&\r\n                    <FavoritesDropdown />\r\n                }\r\n                {\r\n                    isLoading &&\r\n                        <Loader />\r\n                }\r\n                {\r\n                    !isLoading && !errorMessage &&\r\n                    <>\r\n                        {\r\n                            currentWeather &&\r\n                            <CurrentWeatherCard />\r\n                        }\r\n                        {\r\n                            weatherForecast.length > 0 &&\r\n                            <ForecastCardList />\r\n                        }\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport App from './App';\nimport {rootReducer} from './reducer/rootReducer';\nimport './styles/index.scss';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nexport const store = createStore(rootReducer, composeWithDevTools());\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}